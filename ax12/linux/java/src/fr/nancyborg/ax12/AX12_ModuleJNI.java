/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package fr.nancyborg.ax12;

import cz.adamh.utils.NativeUtils;
import java.io.IOException;

class AX12_ModuleJNI {
  public final static native void imaxdiv_t_quot_set(long jarg1, imaxdiv_t jarg1_, long jarg2);
  public final static native long imaxdiv_t_quot_get(long jarg1, imaxdiv_t jarg1_);
  public final static native void imaxdiv_t_rem_set(long jarg1, imaxdiv_t jarg1_, long jarg2);
  public final static native long imaxdiv_t_rem_get(long jarg1, imaxdiv_t jarg1_);
  public final static native long new_imaxdiv_t();
  public final static native void delete_imaxdiv_t(long jarg1);
  public final static native long imaxabs(long jarg1);
  public final static native long imaxdiv(long jarg1, long jarg2);
  public final static native long strtoimax(String jarg1, long jarg2, int jarg3);
  public final static native java.math.BigInteger strtoumax(String jarg1, long jarg2, int jarg3);

    static {
        try {
            NativeUtils.loadLibraryFromJar("/libs/libAX12Java.so");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

  public final static native void delete_AX12Base(long jarg1);
  public final static native int AX12Base_readRegister1(long jarg1, AX12Base jarg1_, int jarg2);
  public final static native int AX12Base_readRegister2(long jarg1, AX12Base jarg1_, int jarg2);
  public final static native boolean AX12Base_writeRegister1(long jarg1, AX12Base jarg1_, int jarg2, short jarg3);
  public final static native boolean AX12Base_writeRegister2(long jarg1, AX12Base jarg1_, int jarg2, int jarg3);
  public final static native void AX12Base_pingWait(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_reset(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_ping(long jarg1, AX12Base jarg1_);
  public final static native float AX12Base_getPresentPosition(long jarg1, AX12Base jarg1_);
  public final static native float AX12Base_getPresentSpeed(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_setGoalPosition__SWIG_0(long jarg1, AX12Base jarg1_, float jarg2, boolean jarg3);
  public final static native boolean AX12Base_setGoalPosition__SWIG_1(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setMovingSpeed(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setEndlessTurnMode(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native float AX12Base_getCWLimit(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_setCWLimit(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native float AX12Base_getCCWLimit(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_setCCWLimit(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setAngleLimits(long jarg1, AX12Base jarg1_, float jarg2, float jarg3);
  public final static native boolean AX12Base_setTorqueEnable(long jarg1, AX12Base jarg1_, boolean jarg2);
  public final static native boolean AX12Base_changeID(long jarg1, AX12Base jarg1_, short jarg2);
  public final static native boolean AX12Base_changeBaud(long jarg1, AX12Base jarg1_, int jarg2);
  public final static native void AX12Base_setCurrentID(long jarg1, AX12Base jarg1_, short jarg2);
  public final static native void AX12Base_setCurrentBaud(long jarg1, AX12Base jarg1_, int jarg2);
  public final static native boolean AX12Base_isMoving(long jarg1, AX12Base jarg1_);
  public final static native long AX12Base_getData(long jarg1, AX12Base jarg1_);
  public final static native short AX12Base_getDataSize(long jarg1, AX12Base jarg1_);
  public final static native int AX12Base_getErrors(long jarg1, AX12Base jarg1_);
  public final static native short AX12Base_getReceiverId(long jarg1, AX12Base jarg1_);
  public final static native int AX12Base_getCommError(long jarg1, AX12Base jarg1_);
  public final static native void AX12Base_setDebug(long jarg1, AX12Base jarg1_, boolean jarg2);
  public final static native boolean AX12Base_writePacket(long jarg1, AX12Base jarg1_, int jarg2, short jarg3, short[] jarg4);
  public final static native void AX12Base_debug(long jarg1, AX12Base jarg1_, String jarg2);
  public final static native void AX12Base_dumpHex(long jarg1, AX12Base jarg1_, short[] jarg2, int jarg3);
  public final static native int AX12Base_degToRegVal(float jarg1);
  public final static native float AX12Base_regValToDeg(int jarg1);
  public final static native float AX12Base_regValToFloat(int jarg1);
  public final static native int AX12Base_floatToRegVal(float jarg1);
  public final static native void delete_AX12(long jarg1);
  public final static native int AX12_getSysError(long jarg1, AX12 jarg1_);
  public final static native void AX12_setCurrentBaud(long jarg1, AX12 jarg1_, int jarg2);
  public final static native long AX12_SWIGUpcast(long jarg1);
}
