/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package fr.nancyborg.ax12;

class AX12Base {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected AX12Base(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AX12Base obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AX12_ModuleJNI.delete_AX12Base(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public int readRegister1(int reg_start) {
    return AX12_ModuleJNI.AX12Base_readRegister1(swigCPtr, this, reg_start);
  }

  public int readRegister2(int reg_start) {
    return AX12_ModuleJNI.AX12Base_readRegister2(swigCPtr, this, reg_start);
  }

  public boolean writeRegister1(int reg_start, short val) {
    return AX12_ModuleJNI.AX12Base_writeRegister1(swigCPtr, this, reg_start, val);
  }

  public boolean writeRegister2(int reg_start, int val) {
    return AX12_ModuleJNI.AX12Base_writeRegister2(swigCPtr, this, reg_start, val);
  }

  public void pingWait() {
    AX12_ModuleJNI.AX12Base_pingWait(swigCPtr, this);
  }

  public boolean reset() {
    return AX12_ModuleJNI.AX12Base_reset(swigCPtr, this);
  }

  public boolean ping() {
    return AX12_ModuleJNI.AX12Base_ping(swigCPtr, this);
  }

  public float getPresentPosition() {
    return AX12_ModuleJNI.AX12Base_getPresentPosition(swigCPtr, this);
  }

  public float getPresentSpeed() {
    return AX12_ModuleJNI.AX12Base_getPresentSpeed(swigCPtr, this);
  }

  public boolean setGoalPosition(float angle, boolean block) {
    return AX12_ModuleJNI.AX12Base_setGoalPosition__SWIG_0(swigCPtr, this, angle, block);
  }

  public boolean setGoalPosition(float angle) {
    return AX12_ModuleJNI.AX12Base_setGoalPosition__SWIG_1(swigCPtr, this, angle);
  }

  public boolean setMovingSpeed(float speed) {
    return AX12_ModuleJNI.AX12Base_setMovingSpeed(swigCPtr, this, speed);
  }

  public boolean setEndlessTurnMode(float speed) {
    return AX12_ModuleJNI.AX12Base_setEndlessTurnMode(swigCPtr, this, speed);
  }

  public float getCWLimit() {
    return AX12_ModuleJNI.AX12Base_getCWLimit(swigCPtr, this);
  }

  public boolean setCWLimit(float angle) {
    return AX12_ModuleJNI.AX12Base_setCWLimit(swigCPtr, this, angle);
  }

  public float getCCWLimit() {
    return AX12_ModuleJNI.AX12Base_getCCWLimit(swigCPtr, this);
  }

  public boolean setCCWLimit(float angle) {
    return AX12_ModuleJNI.AX12Base_setCCWLimit(swigCPtr, this, angle);
  }

  public boolean setAngleLimits(float cw_angle, float ccw_angle) {
    return AX12_ModuleJNI.AX12Base_setAngleLimits(swigCPtr, this, cw_angle, ccw_angle);
  }

  public boolean setTorqueEnable(boolean enable) {
    return AX12_ModuleJNI.AX12Base_setTorqueEnable(swigCPtr, this, enable);
  }

  public boolean changeID(short new_id) {
    return AX12_ModuleJNI.AX12Base_changeID(swigCPtr, this, new_id);
  }

  public boolean changeBaud(int new_baud) {
    return AX12_ModuleJNI.AX12Base_changeBaud(swigCPtr, this, new_baud);
  }

  public void setCurrentID(short new_id) {
    AX12_ModuleJNI.AX12Base_setCurrentID(swigCPtr, this, new_id);
  }

  public void setCurrentBaud(int new_baud) {
    AX12_ModuleJNI.AX12Base_setCurrentBaud(swigCPtr, this, new_baud);
  }

  public boolean isMoving() {
    return AX12_ModuleJNI.AX12Base_isMoving(swigCPtr, this);
  }

  public SWIGTYPE_p_unsigned_char getData() {
    long cPtr = AX12_ModuleJNI.AX12Base_getData(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public short getDataSize() {
    return AX12_ModuleJNI.AX12Base_getDataSize(swigCPtr, this);
  }

  public int getErrors() {
    return AX12_ModuleJNI.AX12Base_getErrors(swigCPtr, this);
  }

  public short getReceiverId() {
    return AX12_ModuleJNI.AX12Base_getReceiverId(swigCPtr, this);
  }

  public int getCommError() {
    return AX12_ModuleJNI.AX12Base_getCommError(swigCPtr, this);
  }

  public void setDebug(boolean on) {
    AX12_ModuleJNI.AX12Base_setDebug(swigCPtr, this, on);
  }

  public boolean writePacket(int instr, short len, short[] data) {
    return AX12_ModuleJNI.AX12Base_writePacket(swigCPtr, this, instr, len, data);
  }

  public void debug(String format) {
    AX12_ModuleJNI.AX12Base_debug(swigCPtr, this, format);
  }

  public void dumpHex(short[] buffer, int len) {
    AX12_ModuleJNI.AX12Base_dumpHex(swigCPtr, this, buffer, len);
  }

  public static int degToRegVal(float val) {
    return AX12_ModuleJNI.AX12Base_degToRegVal(val);
  }

  public static float regValToDeg(int deg) {
    return AX12_ModuleJNI.AX12Base_regValToDeg(deg);
  }

  public static float regValToFloat(int val) {
    return AX12_ModuleJNI.AX12Base_regValToFloat(val);
  }

  public static int floatToRegVal(float val) {
    return AX12_ModuleJNI.AX12Base_floatToRegVal(val);
  }

  public final static int AX12_BROADCAST = 0xFE;
  // AX12_Instr 
  public final static int AX12_INSTR_PING = 0x01;
  public final static int AX12_INSTR_READ_DATA = 0x02;
  public final static int AX12_INSTR_WRITE_DATA = 0x03;
  public final static int AX12_INSTR_RESET = 0x06;

  // AX12_Register 
  public final static int AX12_ROM_MODEL_NUMBER = 0x00;
  public final static int AX12_ROM_FIRMWARE_VERSION = 0x02;
  public final static int AX12_ROM_ID = 0x03;
  public final static int AX12_ROM_BAUD_RATE = 0x04;
  public final static int AX12_ROM_RETURN_DELAY_TIME = 0x05;
  public final static int AX12_ROM_CW_ANGLE_LIMIT = 0x06;
  public final static int AX12_ROM_CCW_ANGLE_LIMIT = 0x08;
  public final static int AX12_ROM_HIGH_TEMP_LIMIT = 0x0B;
  public final static int AX12_ROM_LOW_VOLTAGE_LIMIT = 0x0C;
  public final static int AX12_ROM_HIGH_VOLTAGE_LIMIT = 0x0D;
  public final static int AX12_ROM_MAX_TORQUE = 0x0E;
  public final static int AX12_ROM_STATUS_RETURN_LEVEL = 0x10;
  public final static int AX12_ROM_ALARM_LED = 0x11;
  public final static int AX12_ROM_ALARM_SHUTDOWN = 0x12;
  public final static int AX12_ROM_DOWN_CALIBRATION = 0x14;
  public final static int AX12_ROM_UP_CALIBRATION = 0x16;
  public final static int AX12_RAM_TORQUE_ENABLE = 0x18;
  public final static int AX12_RAM_LED = 0x19;
  public final static int AX12_RAM_CW_COMPILANCE_MARGIN = 0x1A;
  public final static int AX12_RAM_CCW_COMPILANCE_MARGIN = 0x1B;
  public final static int AX12_RAM_CW_COMPILANCE_SLOPE = 0x1C;
  public final static int AX12_RAM_CCW_COMPILANCE_SLOPE = 0x1D;
  public final static int AX12_RAM_GOAL_POSITION = 0x1E;
  public final static int AX12_RAM_MOVING_SPEED = 0x20;
  public final static int AX12_RAM_TORQUE_LIMIT = 0x22;
  public final static int AX12_RAM_PRESENT_POSITION = 0x24;
  public final static int AX12_RAM_PRESENT_SPEED = 0x26;
  public final static int AX12_RAM_PRESENT_LOAD = 0x28;
  public final static int AX12_RAM_PRESENT_VOLTAGE = 0x2A;
  public final static int AX12_RAM_PRESENT_TEMPERATURE = 0x2B;
  public final static int AX12_RAM_REGISTERED_INSTRUCTION = 0x2C;
  public final static int AX12_RAM_MOVING = 0x2E;
  public final static int AX12_RAM_LOCK = 0x2F;
  public final static int AX12_RAM_PUNCH = 0x30;

  // AX12_Error 
  public final static int AX12_ERROR_NONE = 0;
  public final static int AX12_ERROR_INPUT_VOLTAGE = (1 << 0);
  public final static int AX12_ERROR_ANGLE_LIMIT = (1 << 1);
  public final static int AX12_ERROR_OVERHEATING = (1 << 2);
  public final static int AX12_ERROR_RANGE = (1 << 3);
  public final static int AX12_ERROR_CHECKSUM = (1 << 4);
  public final static int AX12_ERROR_OVERLOAD = (1 << 5);
  public final static int AX12_ERROR_INSTRUCTION = (1 << 6);

  // AX12_Comm_Error 
  public final static int AX12_COMM_ERROR_NONE = 0;
  public final static int AX12_COMM_ERROR_CHECKSUM = (1 << 0);
  public final static int AX12_COMM_ERROR_TIMEOUT = (1 << 1);
  public final static int AX12_COMM_ERROR_FORMAT = (1 << 2);
  public final static int AX12_COMM_ERROR_ID = (1 << 3);
  public final static int AX12_COMM_ERROR_SYSTEM = (1 << 4);

}
