/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package fr.nancyborg.ax12;

class AX12JNI {
  public final static native int AX12Base_AX12_BROADCAST_get();
  public final static native int AX12Base_AX12_INSTR_PING_get();
  public final static native int AX12Base_AX12_INSTR_READ_DATA_get();
  public final static native int AX12Base_AX12_INSTR_WRITE_DATA_get();
  public final static native int AX12Base_AX12_INSTR_RESET_get();
  public final static native int AX12Base_AX12_ROM_MODEL_NUMBER_get();
  public final static native int AX12Base_AX12_ROM_FIRMWARE_VERSION_get();
  public final static native int AX12Base_AX12_ROM_ID_get();
  public final static native int AX12Base_AX12_ROM_BAUD_RATE_get();
  public final static native int AX12Base_AX12_ROM_RETURN_DELAY_TIME_get();
  public final static native int AX12Base_AX12_ROM_CW_ANGLE_LIMIT_get();
  public final static native int AX12Base_AX12_ROM_CCW_ANGLE_LIMIT_get();
  public final static native int AX12Base_AX12_ROM_HIGH_TEMP_LIMIT_get();
  public final static native int AX12Base_AX12_ROM_LOW_VOLTAGE_LIMIT_get();
  public final static native int AX12Base_AX12_ROM_HIGH_VOLTAGE_LIMIT_get();
  public final static native int AX12Base_AX12_ROM_MAX_TORQUE_get();
  public final static native int AX12Base_AX12_ROM_STATUS_RETURN_LEVEL_get();
  public final static native int AX12Base_AX12_ROM_ALARM_LED_get();
  public final static native int AX12Base_AX12_ROM_ALARM_SHUTDOWN_get();
  public final static native int AX12Base_AX12_ROM_DOWN_CALIBRATION_get();
  public final static native int AX12Base_AX12_ROM_UP_CALIBRATION_get();
  public final static native int AX12Base_AX12_RAM_TORQUE_ENABLE_get();
  public final static native int AX12Base_AX12_RAM_LED_get();
  public final static native int AX12Base_AX12_RAM_CW_COMPILANCE_MARGIN_get();
  public final static native int AX12Base_AX12_RAM_CCW_COMPILANCE_MARGIN_get();
  public final static native int AX12Base_AX12_RAM_CW_COMPILANCE_SLOPE_get();
  public final static native int AX12Base_AX12_RAM_CCW_COMPILANCE_SLOPE_get();
  public final static native int AX12Base_AX12_RAM_GOAL_POSITION_get();
  public final static native int AX12Base_AX12_RAM_MOVING_SPEED_get();
  public final static native int AX12Base_AX12_RAM_TORQUE_LIMIT_get();
  public final static native int AX12Base_AX12_RAM_PRESENT_POSITION_get();
  public final static native int AX12Base_AX12_RAM_PRESENT_SPEED_get();
  public final static native int AX12Base_AX12_RAM_PRESENT_LOAD_get();
  public final static native int AX12Base_AX12_RAM_PRESENT_VOLTAGE_get();
  public final static native int AX12Base_AX12_RAM_PRESENT_TEMPERATURE_get();
  public final static native int AX12Base_AX12_RAM_REGISTERED_INSTRUCTION_get();
  public final static native int AX12Base_AX12_RAM_MOVING_get();
  public final static native int AX12Base_AX12_RAM_LOCK_get();
  public final static native int AX12Base_AX12_RAM_PUNCH_get();
  public final static native int AX12Base_AX12_ERROR_NONE_get();
  public final static native int AX12Base_AX12_ERROR_INPUT_VOLTAGE_get();
  public final static native int AX12Base_AX12_ERROR_ANGLE_LIMIT_get();
  public final static native int AX12Base_AX12_ERROR_OVERHEATING_get();
  public final static native int AX12Base_AX12_ERROR_RANGE_get();
  public final static native int AX12Base_AX12_ERROR_CHECKSUM_get();
  public final static native int AX12Base_AX12_ERROR_OVERLOAD_get();
  public final static native int AX12Base_AX12_ERROR_INSTRUCTION_get();
  public final static native int AX12Base_AX12_COMM_ERROR_NONE_get();
  public final static native int AX12Base_AX12_COMM_ERROR_CHECKSUM_get();
  public final static native int AX12Base_AX12_COMM_ERROR_TIMEOUT_get();
  public final static native int AX12Base_AX12_COMM_ERROR_FORMAT_get();
  public final static native int AX12Base_AX12_COMM_ERROR_ID_get();
  public final static native int AX12Base_AX12_COMM_ERROR_SYSTEM_get();
  public final static native boolean AX12Base_readData(long jarg1, AX12Base jarg1_, long jarg2, long jarg3);
  public final static native boolean AX12Base_writeData(long jarg1, AX12Base jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int AX12Base_readRegister1(long jarg1, AX12Base jarg1_, long jarg2);
  public final static native int AX12Base_readRegister2(long jarg1, AX12Base jarg1_, long jarg2);
  public final static native boolean AX12Base_writeRegister1(long jarg1, AX12Base jarg1_, long jarg2, long jarg3);
  public final static native boolean AX12Base_writeRegister2(long jarg1, AX12Base jarg1_, long jarg2, long jarg3);
  public final static native void AX12Base_wait(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_reset(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_ping(long jarg1, AX12Base jarg1_);
  public final static native float AX12Base_getPresentPosition(long jarg1, AX12Base jarg1_);
  public final static native float AX12Base_getPresentSpeed(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_setGoalPosition__SWIG_0(long jarg1, AX12Base jarg1_, float jarg2, boolean jarg3);
  public final static native boolean AX12Base_setGoalPosition__SWIG_1(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setGoalSpeed(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setCWLimit(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setCCWLimit(long jarg1, AX12Base jarg1_, float jarg2);
  public final static native boolean AX12Base_setTorqueEnable(long jarg1, AX12Base jarg1_, boolean jarg2);
  public final static native boolean AX12Base_changeID(long jarg1, AX12Base jarg1_, long jarg2);
  public final static native boolean AX12Base_changeBaud(long jarg1, AX12Base jarg1_, int jarg2);
  public final static native void AX12Base_setCurrentID(long jarg1, AX12Base jarg1_, long jarg2);
  public final static native void AX12Base_setCurrentBaud(long jarg1, AX12Base jarg1_, long jarg2);
  public final static native boolean AX12Base_isMoving(long jarg1, AX12Base jarg1_);
  public final static native long AX12Base_getData(long jarg1, AX12Base jarg1_);
  public final static native long AX12Base_getDataSize(long jarg1, AX12Base jarg1_);
  public final static native int AX12Base_getErrors(long jarg1, AX12Base jarg1_);
  public final static native long AX12Base_getReceiverId(long jarg1, AX12Base jarg1_);
  public final static native int AX12Base_getCommError(long jarg1, AX12Base jarg1_);
  public final static native boolean AX12Base_writePacket(long jarg1, AX12Base jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long AX12Base_degToRegVal(float jarg1);
  public final static native float AX12Base_regValToDeg(long jarg1);
  public final static native float AX12Base_regValToFloat(long jarg1);
  public final static native long AX12Base_floatToRegVal(float jarg1);
  public final static native void delete_AX12Base(long jarg1);
  public final static native long new_AX12Linux__SWIG_0(String jarg1, int jarg2, int jarg3);
  public final static native long new_AX12Linux__SWIG_1(String jarg1, int jarg2);
  public final static native void delete_AX12Linux(long jarg1);
  public final static native int AX12Linux_getSysError(long jarg1, AX12Linux jarg1_);
  public final static native void AX12Linux_setCurrentBaud(long jarg1, AX12Linux jarg1_, int jarg2);
  public final static native long SWIGAX12LinuxUpcast(long jarg1);
}
