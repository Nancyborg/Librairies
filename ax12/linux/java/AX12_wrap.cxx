/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "../../AX12Base.h"
#include "../AX12Linux.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1BROADCAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AX12Base::AX12_BROADCAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1INSTR_1PING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Instr result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Instr)AX12Base::AX12_INSTR_PING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1INSTR_1READ_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Instr result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Instr)AX12Base::AX12_INSTR_READ_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1INSTR_1WRITE_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Instr result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Instr)AX12Base::AX12_INSTR_WRITE_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1INSTR_1RESET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Instr result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Instr)AX12Base::AX12_INSTR_RESET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1MODEL_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_MODEL_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1FIRMWARE_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_FIRMWARE_VERSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1BAUD_1RATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_BAUD_RATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1RETURN_1DELAY_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_RETURN_DELAY_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1CW_1ANGLE_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_CW_ANGLE_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1CCW_1ANGLE_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_CCW_ANGLE_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1HIGH_1TEMP_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_HIGH_TEMP_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1LOW_1VOLTAGE_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_LOW_VOLTAGE_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1HIGH_1VOLTAGE_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_HIGH_VOLTAGE_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1MAX_1TORQUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_MAX_TORQUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1STATUS_1RETURN_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_STATUS_RETURN_LEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1ALARM_1LED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_ALARM_LED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1ALARM_1SHUTDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_ALARM_SHUTDOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1DOWN_1CALIBRATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_DOWN_CALIBRATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ROM_1UP_1CALIBRATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_ROM_UP_CALIBRATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1TORQUE_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_TORQUE_ENABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1LED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_LED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1CW_1COMPILANCE_1MARGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_CW_COMPILANCE_MARGIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1CCW_1COMPILANCE_1MARGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_CCW_COMPILANCE_MARGIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1CW_1COMPILANCE_1SLOPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_CW_COMPILANCE_SLOPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1CCW_1COMPILANCE_1SLOPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_CCW_COMPILANCE_SLOPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1GOAL_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_GOAL_POSITION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1MOVING_1SPEED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_MOVING_SPEED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1TORQUE_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_TORQUE_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1PRESENT_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_PRESENT_POSITION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1PRESENT_1SPEED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_PRESENT_SPEED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1PRESENT_1LOAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_PRESENT_LOAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1PRESENT_1VOLTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_PRESENT_VOLTAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1PRESENT_1TEMPERATURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_PRESENT_TEMPERATURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1REGISTERED_1INSTRUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_REGISTERED_INSTRUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1MOVING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_MOVING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1LOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_LOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1RAM_1PUNCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Register result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Register)AX12Base::AX12_RAM_PUNCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1INPUT_1VOLTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_INPUT_VOLTAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1ANGLE_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_ANGLE_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1OVERHEATING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_OVERHEATING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_RANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1CHECKSUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_CHECKSUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1OVERLOAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_OVERLOAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1ERROR_1INSTRUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Error)AX12Base::AX12_ERROR_INSTRUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1COMM_1ERROR_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Comm_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Comm_Error)AX12Base::AX12_COMM_ERROR_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1COMM_1ERROR_1CHECKSUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Comm_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Comm_Error)AX12Base::AX12_COMM_ERROR_CHECKSUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1COMM_1ERROR_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Comm_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Comm_Error)AX12Base::AX12_COMM_ERROR_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1COMM_1ERROR_1FORMAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Comm_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Comm_Error)AX12Base::AX12_COMM_ERROR_FORMAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1COMM_1ERROR_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Comm_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Comm_Error)AX12Base::AX12_COMM_ERROR_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1AX12_1COMM_1ERROR_1SYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AX12Base::AX12_Comm_Error result;
  
  (void)jenv;
  (void)jcls;
  result = (AX12Base::AX12_Comm_Error)AX12Base::AX12_COMM_ERROR_SYSTEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1readData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint8_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->readData(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1writeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *arg4 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint8_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(uint8_t **)&jarg4; 
  result = (bool)(arg1)->writeData(arg2,arg3,(uint8_t const (*))arg4);
  jresult = (jboolean)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1readRegister1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->readRegister1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1readRegister2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->readRegister2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1writeRegister1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint8_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->writeRegister1(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1writeRegister2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint16_t arg3 ;
  uint8_t *argp2 ;
  uint16_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint16_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->writeRegister2(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1pingWait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AX12Base *arg1 = (AX12Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  (arg1)->pingWait();
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (bool)(arg1)->reset();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1ping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (bool)(arg1)->ping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getPresentPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (float)(arg1)->getPresentPosition();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getPresentSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (float)(arg1)->getPresentSpeed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setGoalPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setGoalPosition(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setGoalPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->setGoalPosition(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setGoalSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->setGoalSpeed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setCWLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->setCWLimit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setCCWLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->setCCWLimit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setTorqueEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTorqueEnable(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1changeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->changeID(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1changeBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->changeBaud(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setCurrentID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCurrentID(arg2);
}


SWIGEXPORT void JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1setCurrentBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCurrentBaud(arg2);
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1isMoving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (bool)(arg1)->isMoving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (uint8_t *)(arg1)->getData();
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (arg1)->getDataSize();
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (int)(arg1)->getErrors();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getReceiverId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (arg1)->getReceiverId();
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1getCommError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  result = (int)(arg1)->getCommError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1writePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  AX12Base *arg1 = (AX12Base *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t *arg4 ;
  uint8_t *argp2 ;
  uint8_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Base **)&jarg1; 
  argp2 = *(uint8_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(uint8_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint8_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(uint8_t **)&jarg4; 
  result = (bool)(arg1)->writePacket(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1degToRegVal(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = AX12Base::degToRegVal(arg1);
  *(uint16_t **)&jresult = new uint16_t((const uint16_t &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1regValToDeg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  uint16_t arg1 ;
  uint16_t *argp1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (float)AX12Base::regValToDeg(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1regValToFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  uint16_t arg1 ;
  uint16_t *argp1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(uint16_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint16_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (float)AX12Base::regValToFloat(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Base_1floatToRegVal(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = AX12Base::floatToRegVal(arg1);
  *(uint16_t **)&jresult = new uint16_t((const uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fr_nancyborg_ax12_AX12JNI_delete_1AX12Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AX12Base *arg1 = (AX12Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AX12Base **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_new_1AX12Linux_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  AX12Linux *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (AX12Linux *)new AX12Linux((char const *)arg1,arg2,arg3);
  *(AX12Linux **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_new_1AX12Linux_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  AX12Linux *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (AX12Linux *)new AX12Linux((char const *)arg1,arg2);
  *(AX12Linux **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_fr_nancyborg_ax12_AX12JNI_delete_1AX12Linux(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AX12Linux *arg1 = (AX12Linux *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AX12Linux **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Linux_1getSysError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AX12Linux *arg1 = (AX12Linux *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Linux **)&jarg1; 
  result = (int)(arg1)->getSysError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_fr_nancyborg_ax12_AX12JNI_AX12Linux_1setCurrentBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AX12Linux *arg1 = (AX12Linux *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AX12Linux **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCurrentBaud(arg2);
}


SWIGEXPORT jlong JNICALL Java_fr_nancyborg_ax12_AX12JNI_SWIGAX12LinuxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(AX12Base **)&baseptr = *(AX12Linux **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

